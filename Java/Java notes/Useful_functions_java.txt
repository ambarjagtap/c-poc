1- 'String' to other types :
    - Double num=Double.parseDouble(str);   //String to Double
    - Long num=Long.parseLong(str);      //String to Long 
    - int num=Integer.parseInt(str);    //String to int
   
_________________________________________________________________________________________________________

2- String:
    - String str=new String();    // empty String constructor
    - String str=new String("abcd");   // Constructing String
    - String str=new String(StringBuilder sb);    // typecasting from StringBuilder to String
    - String str=new String(StringBuffer sf);    // typecasting from StringBuffer to String 
    - String temp="cadv";
    - boolean bool=str.isEmpty();    //returns boolean
    - boolean bool=temp.charAt(0)=='d';     //compares two chars
    - str+="abcd";      // appending String literal to String
    - boolean bool=temp.charAt(0)==temp.charAt(2);   //compares two chars
    - str.length();     // length of string
    - char arr[]=str.toCharArray();    // creating array of char from String
    - str1.equals(str2);    // if equal or not, returns boolean
    - str.equalsIgnoreCase("ABCD"_or_str2);    //compares two Strings ignoring the Case, returns boolean
    - String res=new String(arrayORbytes_array);    // typecasting from char array to String
    - int num=(int)str.charAt(i);    // type cast ASCII to int
    - str.indexOf('char');     // returns index of char on a String
    - int ind=str.lastIndexOf('char');     //returns last index of multiple time occurring chars
    - str.concat("bjbjh");   //Concatenation of String literal
    - str+="abcd";         //appending String literal
    - str.toUpperCase();    // changing all chars to upper case
    - str=str.toLowerCase();     //String to lower case
    - str.substring(start_index,end_index+1);    //returns substring from 'start_index' to 'end_index'
    - str.substring(start_index);    //returns substring from 'start_index' to 'last_index'      
    - String arr[]=str.split("char/symbol");    //returns an array of string separated by "char"
    - String str=Integer.toString(num);    //type-casting number to String 
      String str=valueOf(num);    //type casting from 'num' to 'String'
    - str=str.replace('old_char','new_char');    //replacing a character with new one
    - str=str.trim();     //removes blank spaces 'before' & 'after' the String, not in between
      
   ------------------------------------StringBuilder----------------------------------------------
    - StringBuilder sb=null;  // empty StringBuidler object
    - StringBuilder sb=new StringBuilder(str);   //creating StringBuilder object using String
    - sb.append('char');    // adding character to last end 
    - sb.deleteCharAt(index_num);   // deleting character at index num
    - sb.reverse();    //reversing string
    - sb.toString();  // changing to String 
    
    
   -----------------------------------StringBuffer-------------------------------------------------
   
    
    //NOTE : In StringBuffer we don't need to a reference variable for every change in StringBuffer object, because the changes are performed on the same object itself unlike
             in String object where at every change a new object object is created, so therefore for every change in String object we need to refer it to a variable.
                             
    - StringBuffer sbf=new StringBuffer(int_capacity);      //Specifying capacity while constructing object  
    - StringBuffer sbf=new StringBuffer();        //empty StringBuffer  |  default capacity= 16 |
    - StringBuffer sbf=new StringBuffer("abcd");        //Creating StringBuffer object using String literal |  capacity= lengthOfString + 16 | 
    - StringBuffer sbf=new StringBuffer(String str);      //creates an StringBuffer object by using String   
    - int len=sbf.length();     //returns an int which is the length of String 
    - char ch=sbf.charAt(int_index);     //returns char type which is char at specified index 
    - sbf=sbf.setCharAt(int_index,'new_char');    //sets a new char at specified index position
    - int c=sbf.capacity();    //returns an int which defines the capacity of StringBuffer object
    - sbf=sbf.append("abcd"/String_str/byte_b/int_i/long_l/float_f..);      //appeding new chars | we can give different types of arguments because append method is overloaded
    - sbf=sbf.insert(int_index,String str/"abc"/double/boolean/char);    //inserting String literal at specified index
    - sbf=sbf.delete(ind_begin,ind_end);    //deletes characters from 'begin' to 'end-1' indexes
 
 
      
_________________________________________________________________________________________________________

3- Set precision :
    - System.out.printf(String.format("%.2f",num));
    - double num=Math.round(num*100.0)/100.0;  //using Math.round();
    
_________________________________________________________________________________________________________

4- Array: 
    - arr.length   //length is not a member function, but instead a data member of class Array
    - Arrays.binarySearch(int_arr,int_key);   // returns index if found, else '-1'  //java.util.Arrays;
    - for(int i:arr)System.out.println(arr[i]);   // printing array using iterator
    - int mar[][]=new int[n][n];    //declaring matrix/2-D using array 
    - Arrays.sort(arr);   //by default sorting array in increasing order || inside 'java.util.Arrays'
    - int arr[]=new int[]{1,2,3,4};   //initialising array of integer
    
    
_________________________________________________________________________________________________________
    
5- Functions regarding 'HashMap':   [import java.util.HashMap;]
    - HashMap<Charter,Integer>map=new HashMap<Character,Integer>(size,loadfactor(0.5f);  //create a map
    - map.put(key,value);  // adding elements 
    - map.get(key);  // fetch value 
    - map.containsKey(key_name);  // finding if key is present 
    - map.size();   // outputs size of map 
    - map.remove(key);   // removing an element 
          
    /*------for iterators----------*/
    - for(Map.Entry<type,type>it:name_of_map.entrySet())     // iterating each element of HashMap
          System.out.println(it.getKey()+" "+it.getValue());   // NOTE: include java.util.Map;          
    - it.getKey();   // get key associated to the index/iterator 
    - it.getValue();  // get value associated to the index/iterator
    
    
    /*------Sorting HashMap--------*/
    
    - Method 1 : By using 'TreeMap'   [import java.util.TreeMap]
        
          
_______________________________________________________________________________________________________________

6- Functions regarding 'TreeMap' :  [import java.util.TreeMap;] 
    - TreeMap<type,type>tm=new TreeMap<type,type>();   //creating a new TreeMap
    - tm.put(HashMap);   //putting HashMap into TreeMap (automatically sorts HashMap according to 'Keys' 
    - for(Map.Entry<type,type>it:tm.entrySet())
        System.out.print(it.getKey()+" "+it.getValue());

____________________________________________________________________________________________________________________

7- Functions regarding 'Math':
    - Math.pow(base,expo);   // return type is double  
    - Math.abs(num1-num2);    // returns absolute value
    - Math.ceil(num1);   // return type is double  
    - Math.min(num1,num2);  // returns minimum of num1,num2
    - Math.sqrt(num);    //returns square root of a number
________________________________________________________________________________________________________________

8- Functions regarding 'char':
    - char ch=inp.next().charAt(0);   // input character 
    - Character.isLowerCase(ch);   // returns 'true' if char is lower case, else 'false'  
    - Character.isUpperCase(ch);   // returns 'true' if char is upper case, else 'false'
    - Character.toLowerCase(ch);   // changing char to lower case 
    - Character.toUpperCase(ch);   // changing char to upper case
    - char ch='\0';    //intialising null character
    - String str=Character.toString(char);   //Character to String
    - String str=String.valueOf(char);     //Character to String 
    - 
    
   
________________________________________________________________________________________________________________________________________________

9. ArrayList : (import java.util.ArrayList;)
        - ArrayList<String>list_name=new ArrayList<>();   //initialising ArrayList of String
          ArrayList<Integer>list_name=new ArrayList<Integer>(n);  // declaring ArrayList of size 'n'
        - Collections.addAll(list_name,array_name);    // adding array to list
        - list_name.add(element);  // appending elements to end of List
        - list_name.add(int_index,element);   //appending elements at specified index
        - list_name.remove(int_index);  //removes element at specified index
        - list_name.size();  // returns size of list
        - list_name.get(index);  // accessing elements from list
        - list_name.set(index,val);   //declaring a new value to an index
        - ArrayList<Integer>ls=new ArrayList<Integer>(Arrays.asList(0,1,2,3));    //initialising an ArrayList  //inside java.util.Arrays;
        - list_name.clear();    //deleting all elements of ArrayList
        - boolean bool=list_name.contains(element);   //returns an boolean 
        - 
        
        /*--------------------Using Collections class------------[import java.util.Collections]-----------------------------*/
        - int max=Collections.max(list_name);     //returns the max value in ArrayList]
        - Collections.sort(list_name);    //sorts the ArrayList (By default ascending order)
        - Collections.sort(list_name,Collections.reverseOrder());    //sorts the ArrayList in descending order
        - Collections.addAll(list_name,array_name);     //Adding Array elements to ArrayList 
        - collections.swap(list_name,index,index);    //swapping elements of ArrayList

_______________________________________________________________________________________________________________________________________________

10. Scanner class functions :
    - Scanner inp=new Scanner(System.in);
        inp.hasNextInt();        //returns 'true' if there is a int in input, else returns 'false'.
        inp.hasNextLine();       //returns 'true' if there is a nextLine in input, else returns 'false'.
