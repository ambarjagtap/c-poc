Difference between 'String' and 'StringBuffer' objects :
 
 - 'String' objects are 'immutable/non-changeable' whereas,
    'StringBuffer' objects are 'mutable / changeable'.
    
 - Immutability  : It means that String object once created, the contents cannot be manipulated. If one tries to manipulate contents then a new object is created with 
                   those changes.
                   
 - Operations on String during runtime (Eg. str.toLowerCase()) are stored in 'heap area' and now variable points to that object in heap. Note that no object is stored 
   in 'String Constant Pool' area.
   
 - New objects are only created if not objects are present already in heap as well as String Constant Pool area.
     
 - 'String' objects/variables can 'concat' strings without assigning it to any variable/object, which is eligible for 'garbage collection'.
    We can't modify the object/var itself.
    
 - '==' operator always meant for 'reference/address' comparison, whether the objects are referring/pointing to the same address or not. 
 
 - "str1.equals(str2);" meant for content comparison in String object. Overriden from class.
   "str1.equals(str2);" meant for reference comparison in StringBuffer object. Not overridden from class.
   
   
 - String str=new String("abc");
    - Two objects are created, one in Heap memory and other in 'String constant pool (SCP)' for future reusability and without any reference variable. 
      Implicitly referenevariable is maintained by JVM in SCP and not available for garbage collection.
    - In 'String Constant Pool' only one copy of literal is there, and many objects may point to this single copy. 
      Whenever we use new keyword, object is allocated in heap also,and in SCP too. String literals are stored in SCP, whether intialised by variable or not. 
      
 - String str="asda";  only one object is created in 'String constant pool (SCP)' area for future reusability. In SCP compiler checks if there is String literal present already
   or not, if not then only a string is allocated. 
   
 - For every String literal "xyz" a new copy is created in SCP area.
 
 - 'new' operator is used to allocate Strings in the heap area during runtime. String constants or String literals are allocated in SCP area.
 
 - SCP concept is applicable to String objects only. Because String object is most used object in java. Whereas StringBuffer objects have unique copies for each objects.

 - In wrapper class, all objects are immutable: Byte, short, int, float, double, boolean, character

 - For every String literal, copy is stored in 'String Constant Pool (SCP)'.
 
 - Advantage of 'String Constant Pool (SCP)':
    - It saves RAM memory by sharing objects,  by creating only one object in SCP and creating references for different objects. That's why String objects are immutable because
      mulitple objects are pointing to that String and any change is very costly.
    - SCP is applicable for 'String' obj not for 'StringBuffer'.
 
 - Important constructors of String class object :
    - String str=new String();   //empty String
    - String str=new String("vds");    // for new operator a string var points to object created in heap area, String literal is stored in SCP
    - String str=new String(StringBuffer obj);  
    - String str=new String(StringBuilder obj);
    - String str=new String(char arr[]);   // character array to String
    - String str=new String(arr);
    - string str=new String(byte_array);    // byte: -128 to 127
    
 - Important methods of String class :
    - str=str.concat("cdaa");     //for concatenation
    - str+="abcd";   //also for concatenation
    - str.equals(str2);   //returns boolean after checking contents of two Strings
    - str.equalsIgnoreCase("durga");  //compares two strings while ignoring case of letters, returns a boolean 
    - str.isEmpty();   //returns true or false
    - arr.length [is applicable for array] [.length is a variable]
    - str=str.replace('old_char','new_char');     //replacing particular char of String with another
    - str=str.substring(index_begin);     //returns substring from begine index to last index
    - str=str.substring(index_begin,index_last+1);      //returns substring from 'index_begin' to 'index_last' ('last+1' is the argument)  
    - int ind=str.indexOf('char');    //returns index of char inside a String 
    - int ind=str.lastIndexOf('char');     //returns last index of multiple time occurring chars
    - str=str.toLowerCase();     //String to lower case
    - str=str.toUpperCase();     // String to upper case 
    - str=str.trim();     //removes blank spaces 'before' & 'after' the String, not in between
    
