Difference between 'String' and 'StringBuffer' objects :
 
 - 'String' objects are 'immutable/non-changeable' whereas,
    'StringBuffer' objects are 'mutable / changeable'.
    
 - Immutability  : It means that String object once created, the contents cannot be manipulated. If one tries to manipulate contents then a new object is created with 
                   those changes.
                   
 - Operations on String during runtime (Eg. str.toLowerCase()) are stored in 'heap area' and now variable points to that object in heap. Note that no object is stored 
   in 'String Constant Pool' area.
   
 - New objects are only created if not objects are present already in heap as well as String Constant Pool area.
     
 - 'String' objects/variables can 'concat' strings without assigning it to any variable/object, which is eligible for 'garbage collection'.
    We can't modify the object/var itself.
    
 - '==' operator always meant for 'reference/address' comparison, whether the objects are referring/pointing to the same address or not. 
 
 - "str1.equals(str2);" meant for content comparison in String object. Overriden from class.
   "str1.equals(str2);" meant for reference comparison in StringBuffer object. Not overridden from class.
   
   
 - String str=new String("abc");
    - Two objects are created, one in Heap memory and other in 'String constant pool (SCP)' for future reusability and without any reference variable. 
      Implicitly referenevariable is maintained by JVM in SCP and not available for garbage collection.
    - In 'String Constant Pool' only one copy of literal is there, and many objects may point to this single copy. 
      Whenever we use new keyword, object is allocated in heap also,and in SCP too. String literals are stored in SCP, whether intialised by variable or not. 
      
 - String str="asda";  only one object is created in 'String constant pool (SCP)' area for future reusability. In SCP compiler checks if there is String literal present already
   or not, if not then only a string is allocated. 
   
 - For every String literal "xyz" a new copy is created in SCP area.
 
 - 'new' operator is used to allocate Strings in the heap area during runtime. String constants or String literals are allocated in SCP area.
 
 - SCP concept is applicable to String objects only. Because String object is most used object in java. Whereas StringBuffer objects have unique copies for each objects.

 - In wrapper class, all objects are immutable: Byte, short, int, float, double, boolean, character

 - For every String literal, copy is stored in 'String Constant Pool (SCP)'.
 
 - Advantage of 'String Constant Pool (SCP)':
    - It saves RAM memory by sharing objects,  by creating only one object in SCP and creating references for different objects. That's why String objects are immutable because
      mulitple objects are pointing to that String and any change is very costly.
    - SCP is applicable for 'String' obj not for 'StringBuffer'.
 
   
 - Important methods of String class :
   
   
    
 
 - StringBuffer can't be made immutable because the internal methods are implemented for purpose of immutability. 

 - Immutability and final keyword :
    - By declaring final a StringBuffer object can't become immutable.
    - Immutability is for objects, whereas final is for variable.
    - By assigning a variable 'final' keyword, we cannot refer the same variable to any other object.
    
    
 - Anychange/operation on String objects must be refered/stored to/inside a variable. If not done so, current variable still points to old object and the operation done at 
   runtime is eligible for garbage collection. 
 
 
 ______________________________________________________________________________________________________________________________________________________________________________
 
 StringBuffer :
 
 Whenever the contents of string is going to change frequently use StringBuffer. Using String is not good because it creates a new object every time change is made, which is
 not efficient.
 
 StringBuffer changes are done on the existing object only.
 
 capacity : no of chars Stringbuffer can accomodate. for StringBuffer it is '16'.
 

 
 If we are trying to add more chars than capacity , a new object is created with more capacity and the elements are copied into it, now the variable is pointing to new object.
 Old object is eligible for garbage collection. new capacity = (current capacity+1)*2;
 


